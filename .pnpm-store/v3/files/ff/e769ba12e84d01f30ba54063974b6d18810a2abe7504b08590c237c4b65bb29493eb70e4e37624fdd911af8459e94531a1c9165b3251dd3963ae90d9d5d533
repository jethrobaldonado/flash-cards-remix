// @ts-expect-error
// eslint-disable-next-line import/no-unresolved
import * as build from 'virtual:entry-sw';
import { handleRequest } from './utils/handle-request.js';
const _self = self;
/**
 * Creates the load context for the worker action and loader.
 */
function createContext(event) {
    // getLoadContext is a function exported by the `entry.worker.js`
    const context = build.entry.module.getLoadContext?.(event) || {};
    return {
        event,
        fetchFromServer: () => fetch(event.request.clone()),
        // NOTE: we want the user to override the above properties if needed.
        ...context,
    };
}
// if the user export a `defaultFetchHandler` inside the entry.worker.js, we use that one as default handler
const defaultHandler = build.entry.module.defaultFetchHandler ||
    ((event) => fetch(event.request.clone()));
// // if the user export a `errorHandler` inside the entry.worker.js, we use that one as default handler
const defaultErrorHandler = build.entry.module.errorHandler ||
    ((error, { request }) => {
        if (!request.signal.aborted) {
            console.error(error);
        }
    });
_self.__workerManifest = {
    // Re-publishing this. Somehow it's not available as `latest`
    assets: build.assets,
    routes: build.routes,
};
// DO NOT OVERRIDE!!!
_self.addEventListener('fetch', 
/**
 * The main fetch event listener callback.
 */
event => {
    /* Main request handler */
    const response = handleRequest({
        event,
        routes: build.routes,
        defaultHandler,
        errorHandler: defaultErrorHandler,
        loadContext: createContext(event),
    });
    return event.respondWith(response);
});
